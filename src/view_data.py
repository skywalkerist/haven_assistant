import json
import argparse
import os
from typing import Dict, Any

def print_profile(profile_path: str):
    """Prints the contents of a person's profile JSON file."""
    if not os.path.exists(profile_path):
        print(f"Error: Profile file not found at '{profile_path}'")
        return

    try:
        with open(profile_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"\n--- Viewing Profile: {profile_path} ---")
        print(json.dumps(data, indent=4, ensure_ascii=False))
        print("--- End of Profile ---")

    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{profile_path}'. The file might be corrupted.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


def print_memory_tree(tree_path: str):
    """Prints the contents of the memory tree JSON file in a structured way."""
    if not os.path.exists(tree_path):
        print(f"Error: Memory tree file not found at '{tree_path}'")
        return

    try:
        with open(tree_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        print(f"\n--- Viewing Memory Tree: {tree_path} ---")
        
        def print_node(node: Dict[str, Any], indent: str = ""):
            """Recursively prints a node and its children."""
            # Print basic info for the current node
            timestamp = node.get('timestamp', 'N/A')
            summary = node.get('summary', 'No Summary')
            print(f"{indent}* Node ID: {node.get('node_id')}")
            print(f"{indent}  - Timestamp: {timestamp}")
            print(f"{indent}  - Summary: '{summary}'")
            
            # Recursively print children
            children = node.get('children', [])
            if children:
                print(f"{indent}  - Children ({len(children)}):")
                for child in children:
                    print_node(child, indent + "    ")

        print_node(data)
        print("--- End of Memory Tree ---")

    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{tree_path}'. The file might be corrupted.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="A tool to view the JSON data files generated by the MemoryAgent.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        'type', 
        choices=['profile', 'memory'], 
        help="The type of data to view.\n"
             "'profile': View a specific person's profile.\n"
             "'memory': View the global memory tree."
    )
    parser.add_argument(
        'name', 
        nargs='?', 
        default='memory_tree',
        help="The name of the data file to view.\n"
             "For 'profile', provide the person's name (e.g., '张三').\n"
             "For 'memory', this argument is ignored."
    )
    parser.add_argument(
        '--data_dir',
        default='data',
        help="The base directory where data is stored (default: 'data')."
    )

    args = parser.parse_args()

    if args.type == 'profile':
        if args.name == 'memory_tree':
            parser.error("For type 'profile', you must provide a person's name.")
        profile_path = os.path.join(args.data_dir, 'profiles', f"{args.name}_profile.json")
        print_profile(profile_path)
    
    elif args.type == 'memory':
        tree_path = os.path.join(args.data_dir, 'memory_tree.json')
        print_memory_tree(tree_path)

if __name__ == "__main__":
    main()
